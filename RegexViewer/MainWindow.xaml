<Window x:Class="RegexViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:local="clr-namespace:RegexViewer"
        Title="RegexViewer" Height="350" Width="525">
    <Window.Resources>
        <local:MainViewModel x:Key="mainViewModel" />
        <local:RegexViewerSettings x:Key="settings" />
        <local:LogTabViewModel x:Key="logTabViewModel" />
        <local:FilterTabViewModel x:Key="filterTabViewModel" />
        <BooleanToVisibilityConverter x:Key="boolToVis" />
        <ObjectDataProvider MethodName="GetType"  ObjectType="{x:Type sys:Type}" x:Key="colorsTypeOdp">
            <ObjectDataProvider.MethodParameters>
                <sys:String>System.Windows.Media.Colors, PresentationCore, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</sys:String>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider ObjectInstance="{StaticResource colorsTypeOdp}" MethodName="GetProperties" x:Key="colorPropertiesOdp"/>
    </Window.Resources>
    <Window.InputBindings>
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.OpenCommand}" CommandParameter="{Binding}" Gesture="CTRL+O" />
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.OpenCommand}" CommandParameter="{Binding}" Gesture="CTRL+ALT+O" />
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.SaveCommand}" CommandParameter="{Binding}" Gesture="CTRL+ALT+S" />
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.CloseCommand}" CommandParameter="{Binding}" Gesture="CTRL+ALT+C" />
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.NewCommand}" CommandParameter="{Binding}" Gesture="CTRL+ALT+N" />
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.HideCommand}" CommandParameter="{Binding}" Gesture="CTRL+H" />
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.CloseCommand}" CommandParameter="{Binding}" Gesture="CTRL+S" />
    </Window.InputBindings>
    <!--<Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Copy" CanExecute="CommandBinding_CanExecute" Executed="CommandBinding_Executed" />
    </Window.CommandBindings>-->
    <!--http://www.codeproject.com/Articles/768427/The-big-MVVM-Template-->
    <DockPanel DataContext="{StaticResource mainViewModel}">
        <!--<my:ErrorControl Visibility="{Binding Path=ThereWasAnError, Mode=TwoWay, Converter={StaticResource booltoVis}, UpdateSourceTrigger=PropertyChanged}" />-->

        <Menu DockPanel.Dock="Top">
            <MenuItem Header="_File">
                <MenuItem Header="_Open" Command="{Binding LogViewModel.OpenCommand}" CommandParameter="{Binding}" />
                <MenuItem Header="_Close" Command="{Binding LogViewModel.CloseCommand}" CommandParameter="{Binding}" />
            </MenuItem>
            <MenuItem Header="_Filter">
                <MenuItem Header="_Open" Command="{Binding FilterViewModel.OpenCommand}" CommandParameter="{Binding}" />
                <MenuItem Header="_Close" Command="{Binding FilterViewModel.CloseCommand}" CommandParameter="{Binding}" />
                <MenuItem Header="_Save" />
            </MenuItem>
            <MenuItem Header="_Options">
                <MenuItem Header="_Settings" />
            </MenuItem>
            <MenuItem Header="_Help">
                <MenuItem Header="_Help" />
            </MenuItem>
        </Menu>
        <Canvas
                Name="canvasOpenDialog"
                Width="200"
                Height="200"
                Visibility="{Binding Path=LogViewModel.OpenDialogVisible, Converter={StaticResource boolToVis}, FallbackValue=Collapsed}">
            <TextBox Text="this is a test" />
        </Canvas>
        <!--<Canvas Name="canvasOpenDialog" Width="200" Height="200" Visibility="Collapsed" />-->
        <Grid>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="5" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <TabControl x:Name="tabFilters" Grid.Column="0" HorizontalAlignment="Stretch"
                        ItemsSource="{Binding Path=FilterViewModel.TabItems}"
                        SelectedIndex="{Binding Path=FilterViewModel.SelectedIndex, Mode=TwoWay}"
                        Margin="0,0,0,25" VerticalAlignment="Stretch">
                <TabControl.ItemTemplate>
                    <!-- this is the header template-->
                    <DataTemplate>
                        <TextBlock Text="{Binding Path=Header}" />
                    </DataTemplate>
                </TabControl.ItemTemplate>
                <TabControl.ContentTemplate>
                    <!-- this is the body of the TabItem template-->
                    <!--http://stackoverflow.com/questions/19841649/binding-wpf-datagrid-cell-background-colour-with-trigger-->
                    <DataTemplate>
                        <DataGrid Name="dataGridFilter"
                          ItemsSource="{Binding Path=ContentList, Mode=TwoWay}"
                          AutoGenerateColumns="False"
                          Grid.Column="0"
                          HorizontalAlignment="Stretch"
                          Margin="0,0,0,0"
                          VerticalAlignment="Stretch"
                          Background="{Binding Source={StaticResource settings}, Path=Settings.BackgroundColor}"
                          Tag="{Binding}" >
                            <DataGrid.CellStyle>
                                <Style TargetType="DataGridCell">
                                    <Style.Setters>
                                        <Setter Property="Background" Value="{Binding Source={StaticResource settings}, Path=Settings.BackgroundColor}" />
                                        <Setter Property="Foreground" Value="{Binding Source={StaticResource settings}, Path=Settings.ForegroundColor}" />
                                    </Style.Setters>
                                </Style>
                            </DataGrid.CellStyle>

                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Index" Binding="{Binding Path=Index}" SortDirection="Ascending" />
                                <DataGridCheckBoxColumn Header="Enabled" Binding="{Binding Path=Enabled}" />
                                <DataGridCheckBoxColumn Header="Exclude" Binding="{Binding Path=Exclude}" />
                                <DataGridCheckBoxColumn Header="Regex" Binding="{Binding Path=Regex}" />
                                <DataGridTemplateColumn Header="Background Color" >
                                    <DataGridTemplateColumn.CellTemplate >
                                        
                                        <DataTemplate>
                                            <ComboBox Name="backgroundColorCombo"
                                                  ItemsSource="{Binding Source={StaticResource colorPropertiesOdp}}" 
                                                  
                                                  SelectedValuePath="Name"  
                                                  SelectedValue="{Binding BackgroundColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                  GotFocus="colorCombo_Selected"
                                                  KeyDown="colorCombo_KeyDown" >
                                                <ComboBox.ItemTemplate>
                                                    <DataTemplate>
                                                        <StackPanel Orientation="Horizontal" >
                                                            <TextBlock Width="20" Height="15" Margin="0,0,5,0" Background="{Binding Name}" />
                                                            <TextBlock Name="backgroundColorText" Text="{Binding Name}" />
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </ComboBox.ItemTemplate>
                                            </ComboBox>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>

                                <DataGridTemplateColumn Header="Foreground Color">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <ComboBox Name="foregroundColorCombo"
                                                  ItemsSource="{Binding Source={StaticResource colorPropertiesOdp}}" 
                                                  SelectedValuePath="Name"  
                                                  SelectedValue="{Binding ForegroundColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                  GotFocus="colorCombo_Selected"
                                                  KeyDown="colorCombo_KeyDown" >
                                                <ComboBox.ItemTemplate>
                                                    <DataTemplate>
                                                        <StackPanel Orientation="Horizontal" >
                                                            <TextBlock Width="20" Height="15" Margin="0,0,5,0" Background="{Binding Name}" />
                                                            <TextBlock  Text="{Binding Name}" />
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </ComboBox.ItemTemplate>
                                            </ComboBox>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTextColumn Header="Filter Pattern" Binding="{Binding Path=Filterpattern}" >
                                    <DataGridTextColumn.CellStyle >
                                        <Style TargetType="DataGridCell" >
                                            <Style.Setters>
                                                <Setter Property="Background" Value="{Binding Path=BackgroundColor, Mode=TwoWay, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True}" />
                                                <Setter Property="Foreground" Value="{Binding Path=ForegroundColor, Mode=TwoWay, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True}" />
                                            </Style.Setters>
                                        </Style>
                                    </DataGridTextColumn.CellStyle>
                                </DataGridTextColumn>
                                <DataGridTextColumn Header="Count" Binding="{Binding Path=Count}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="Notes" Binding="{Binding Path=Notes}" Width="*" />
                            </DataGrid.Columns>
                            <DataGrid.ContextMenu>
                                <ContextMenu HasDropShadow="True">
                                    <!--<MenuItem Header="Copy" Command="{Binding CopyCommand}" CommandParameter="{Binding ElementName=logFileData,Path=SelectedItems, Mode=TwoWay}" />-->
                                    <MenuItem Header="Copy" Command="{Binding FilterViewModel.CopyCommand}" />
                                    <MenuItem Header="Paste" Command="{Binding FilterViewModel.PasteCommand}" />
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                        </DataGrid>
                    </DataTemplate>
                </TabControl.ContentTemplate>
                <TabControl.ContextMenu>
                    <ContextMenu HasDropShadow="True">
                        <!--<MenuItem Header="Copy" Command="ApplicationCommands.Copy" CommandTarget="{Binding ElementName=logFileData}" />-->
                        <MenuItem Header="Close" Command="{Binding FilterViewModel.CloseCommand}" />
                        <MenuItem Header="Save" Command="{Binding FilterViewModel.SaveCommand}" />
                        <!--<MenuItem Header="Copy" Command="{Binding LogViewModel.CopyCommand}" CommandTarget="{Binding ElementName=logFileData}" />-->
                    </ContextMenu>
                </TabControl.ContextMenu>
            </TabControl>
            <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" Width="5">
            </GridSplitter>
            <TabControl x:Name="tabLogs" Grid.Column="2" HorizontalAlignment="Stretch"
                        Margin="0,0,0,25" VerticalAlignment="Stretch"
                        ItemsSource="{Binding Path=LogViewModel.TabItems}"
                        SelectedIndex="{Binding Path=LogViewModel.SelectedIndex, Mode=TwoWay}">
                <TabControl.ItemTemplate>
                    <!-- this is the header template-->
                    <DataTemplate>
                        <TextBlock Text="{Binding Path=Header}" />
                    </DataTemplate>
                </TabControl.ItemTemplate>
                <TabControl.ContentTemplate>
                    <!-- this is the body of the TabItem template-->
                    <DataTemplate>
                        <ListBox x:Name="logFileData"
                                 ItemsSource="{Binding Path=ContentList}"
                                 AllowDrop="True"
                                 SelectionMode="Extended"
                                 
                                 Background="{Binding Source={StaticResource settings}, Path=Settings.BackgroundColor}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="SelectionChanged">
                                    <i:InvokeCommandAction Command="{Binding SelectionChangedCommand}"  CommandParameter="{Binding ElementName=logFileData, Path=SelectedItems}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <!--<ListBox.CommandBindings>
                                <CommandBinding Command="ApplicationCommands.Copy" CanExecute="LogCommandBinding_CanExecute" Executed="LogCommandBinding_Executed" />
                            </ListBox.CommandBindings>-->
                            <ListBox.InputBindings>
                                <KeyBinding Key="C" Modifiers="Control" Command="{Binding CopyCommand}" />
                            </ListBox.InputBindings>
                            <ListBox.ContextMenu>

                                <ContextMenu HasDropShadow="True">
                                    <!--<MenuItem Header="Copy" Command="ApplicationCommands.Copy" />-->
                                    <!--<MenuItem Header="Copy" Command="{Binding CopyCommand}" CommandParameter="{Binding Source={x:Reference logFileData},Path=SelectedItems}" />-->
                                    <MenuItem Header="Copy2" Command="{Binding CopyCommand}" CommandParameter="{Binding Path=ContentList}" InputGestureText="Ctrl+C"/>
                                    <!--<MenuItem Header="Copy" Command="{Binding CopyCommand}" />-->
                                    <MenuItem Header="Select All Test" Command="{Binding SelectAllCommand}" />
                                    <!--<MenuItem Header="Find" Command="{Binding FindCommand}" />-->
                                </ContextMenu>
                            </ListBox.ContextMenu>
                        </ListBox>
                    </DataTemplate>
                </TabControl.ContentTemplate>
                <TabControl.ContextMenu>
                    <ContextMenu HasDropShadow="True">
                        <!--<MenuItem Header="Copy" Command="ApplicationCommands.Copy" CommandTarget="{Binding ElementName=logFileData}" />-->
                        <MenuItem Header="Close" Command="{Binding LogViewModel.CloseCommand}" />
                        <!--<MenuItem Header="Copy" Command="{Binding LogViewModel.CopyCommand}" CommandTarget="{Binding ElementName=logFileData}" />-->
                    </ContextMenu>
                </TabControl.ContextMenu>
            </TabControl>
            <Label Name="labelQuickFind" HorizontalAlignment="Left" VerticalAlignment="Bottom" Grid.Column="2" Content="Quick Find:" Width="75" />
            <TextBox Name="textboxQuickFind" Grid.Column="2" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Margin="75,0,0,0" Height="25" />
            <Label Name="labelStatus" HorizontalAlignment="Left" VerticalAlignment="Bottom" Grid.Column="0" Content="Status:" Width="50" />
            <ListBox Name="listboxStatus" Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Bottom"
                     Margin="50,0,0,0"
                     SelectionMode="Extended"
                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                     Height="25"
                     ItemsSource="{Binding Path=Status}">
                <ListBox.ContextMenu>
                    <ContextMenu HasDropShadow="True">
                        <MenuItem Header="Copy" Command="{Binding CopyCommand}" />
                        <MenuItem Header="Select All" Command="{Binding SelectAllCommand}" />
                    </ContextMenu>
                </ListBox.ContextMenu>
            </ListBox>
        </Grid>
    </DockPanel>
</Window>
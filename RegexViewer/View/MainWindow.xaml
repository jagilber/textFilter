<Window x:Class="RegexViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:local="clr-namespace:RegexViewer"
        AllowDrop="True"
        Drop="FileData_Drop"
        Title="RegexViewer" Height="600" Width="900">

    <Window.Resources>
        <local:MainViewModel x:Key="mainViewModel" />
        <local:RegexViewerSettings x:Key="settings" />
        <local:LogTabViewModel x:Key="logTabViewModel" />
        <local:FilterTabViewModel x:Key="filterTabViewModel" />

        <BooleanToVisibilityConverter x:Key="BoolToVis" />
        <ObjectDataProvider MethodName="GetType"  ObjectType="{x:Type sys:Type}" x:Key="colorsTypeOdp">
            <ObjectDataProvider.MethodParameters>
                <sys:String>System.Windows.Media.Colors, PresentationCore, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</sys:String>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider ObjectInstance="{StaticResource colorsTypeOdp}" MethodName="GetProperties" x:Key="colorPropertiesOdp" />
    </Window.Resources>

    <Window.InputBindings>
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.CloseCommand}" CommandParameter="{Binding}" Gesture="Ctrl+F4" />
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.ExportCommand}" CommandParameter="{Binding}" Gesture="Ctrl+E" />
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.HideCommand}" CommandParameter="{Binding ElementName=listboxStatus}" Gesture="Ctrl+H" />
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.GotoLineCommand}" CommandParameter="{Binding ElementName=listboxStatus}" Gesture="Ctrl+G" />
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.ReloadCommand}" CommandParameter="{Binding ElementName=listboxStatus}" Gesture="Ctrl+R" />
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.OpenCommand}" CommandParameter="{Binding}" Gesture="Ctrl+O" />
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.SaveCommand}" CommandParameter="{Binding}" Gesture="Ctrl+S" />

        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.CloseCommand}" CommandParameter="{Binding}" Gesture="Ctrl+Alt+F4" />
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.OpenCommand}" CommandParameter="{Binding}" Gesture="Ctrl+Alt+O" />
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.NewCommand}" CommandParameter="{Binding}" Gesture="Ctrl+Alt+N" />
        <KeyBinding Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.SaveCommand}" CommandParameter="{Binding}" Gesture="Ctrl+Alt+S" />
    </Window.InputBindings>

    <DockPanel DataContext="{StaticResource mainViewModel}">
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="_File">
                <MenuItem Header="_Close File" Command="{Binding LogViewModel.CloseCommand}" CommandParameter="{Binding}" InputGestureText="Ctrl+F4" />
                <MenuItem Header="Close _All Files" Command="{Binding LogViewModel.CloseAllCommand}" CommandParameter="{Binding}" />
                <MenuItem Header="Copy File _Path" Command="{Binding LogViewModel.CopyFilePathCommand}" CommandParameter="{Binding}" />
                <MenuItem Header="Export File" Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.ExportCommand}" InputGestureText="Ctrl+E" />
                <MenuItem Header="_Goto Line Number" Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.GotoLineCommand}" InputGestureText="Ctrl+G" />
                <MenuItem Header="Open Containing _Folder" Command="{Binding LogViewModel.OpenFolderCommand}" CommandParameter="{Binding}" />
                <MenuItem Header="_Open File" Command="{Binding LogViewModel.OpenCommand}" CommandParameter="{Binding}" InputGestureText="Ctrl+O" />
                <MenuItem Header="Open View in _New Tab" Command="{Binding LogViewModel.NewCommand}" CommandParameter="{Binding}" InputGestureText="Ctrl+N" />
                <MenuItem Header="Recent Files" ItemsSource="{Binding LogViewModel.RecentCollection}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="MenuItem.Header" Value="{Binding Text}" />
                            <Setter Property="MenuItem.Command"  Value="{Binding Command}" />
                            <Setter Property="MenuItem.CommandParameter" Value="{Binding Text}" />
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="_Reload File" Command="{Binding LogViewModel.ReloadCommand}" CommandParameter="{Binding}" InputGestureText="Ctrl+R" />
                <MenuItem Header="_Save Current View" Command="{Binding LogViewModel.SaveAsCommand}" CommandParameter="{Binding}" InputGestureText="Ctrl+S" />
                <MenuItem Header="Show / _Hide All Items" Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.HideCommand}" InputGestureText="Ctrl+H" />
            </MenuItem>
            <MenuItem Header="_Filter">
                <MenuItem Header="_Close Filter" Command="{Binding FilterViewModel.CloseCommand}" CommandParameter="{Binding}" InputGestureText="Ctrl+Alt+F4" />
                <MenuItem Header="Close _All Filters" Command="{Binding FilterViewModel.CloseAllCommand}" CommandParameter="{Binding}" />
                <MenuItem Header="Copy File _Path" Command="{Binding FilterViewModel.CopyFilePathCommand}" CommandParameter="{Binding}" />
                <MenuItem Header="_Filter Notes" Command="{Binding FilterViewModel.FilterNotesCommand}" CommandParameter="{Binding}" />
                <MenuItem Header="_New Filter" Command="{Binding FilterViewModel.NewCommand}" CommandParameter="{Binding}" InputGestureText="Ctrl+Alt+N" />
                <MenuItem Header="Open Containing _Folder" Command="{Binding FilterViewModel.OpenFolderCommand}" CommandParameter="{Binding}" />
                <MenuItem Header="_Open Filter" Command="{Binding FilterViewModel.OpenCommand}" CommandParameter="{Binding}" InputGestureText="Ctrl+Alt+O" />
                <MenuItem Header="R_ecent Filters" ItemsSource="{Binding FilterViewModel.RecentCollection}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="MenuItem.Header" Value="{Binding Text}" />
                            <Setter Property="MenuItem.Command"  Value="{Binding Command}" />
                            <Setter Property="MenuItem.CommandParameter" Value="{Binding Text}" />
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="_Reload Filter" Command="{Binding FilterViewModel.ReloadCommand}" CommandParameter="{Binding}" InputGestureText="Ctrl+Alt+R" />
                <MenuItem Header="_Save Filter" Command="{Binding FilterViewModel.SaveCommand}" CommandParameter="{Binding}" InputGestureText="Ctrl+Alt+S" />
                <MenuItem Header="Save Filter As" Command="{Binding FilterViewModel.SaveAsCommand}" CommandParameter="{Binding}" />
                <MenuItem Header="S_hared Filters" ItemsSource="{Binding FilterViewModel.SharedCollection}">
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="MenuItem.Header" Value="{Binding Text}" />
                            <Setter Property="MenuItem.Command"  Value="{Binding Command}" />
                            <Setter Property="MenuItem.CommandParameter" Value="{Binding Text}" />
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="_Options">
                <MenuItem Header="_Settings" />
            </MenuItem>
            <MenuItem Header="_Help">
                <MenuItem Header="_Help" />
            </MenuItem>
        </Menu>

        <Grid x:Name="GridMain" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="0,0,0,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="25*" />
                <RowDefinition Height="5" />
                <RowDefinition Height="75*" />
                <RowDefinition Height="25" />
            </Grid.RowDefinitions>

<!-- vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv FILTER FILE DATA vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv -->

            <TabControl x:Name="tabFilters"
                        Grid.Row="0"
                        HorizontalAlignment="Stretch"
                        ItemsSource="{Binding Path=FilterViewModel.TabItems}"
                        SelectedIndex="{Binding Path=FilterViewModel.SelectedIndex, Mode=TwoWay , NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True}"
                        Margin="0,0,0,0" VerticalAlignment="Stretch"
                        >
                
                <TabControl.InputBindings>
                    <KeyBinding Key="Insert" Command="{Binding Path=FilterViewModel.InsertFilterItemCommand}" />
                </TabControl.InputBindings>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="GotFocus">
                        <i:InvokeCommandAction Command="{Binding FilterViewModel.GotFocusCommand}"  CommandParameter="{Binding}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <TabControl.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Path=Header}" />
                    </DataTemplate>
                </TabControl.ItemTemplate>
                <TabControl.Background>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Grid 
                                Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Mode=OneWay}"
                                Height="{Binding Path=ActualHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Mode=OneWay}"
                                >
                                <Rectangle Fill="{Binding Source={StaticResource settings}, Path=Settings.BackgroundColor}"/>
                                <Image Source="../Resources/Filter.png" Opacity="1" HorizontalAlignment="Left" VerticalAlignment="Top" Stretch="None" />
                            </Grid>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </TabControl.Background>
                <TabControl.ContentTemplate x:Uid="tabContent">

                <DataTemplate>
                        <DataGrid x:Name="dataGridFilter"
                          ItemsSource="{Binding Path=ContentList, Mode=TwoWay}"
                          AutoGenerateColumns="False"
                          Grid.Row="0"
                          HorizontalAlignment="Stretch"
                          Margin="0,0,0,0"
                          ScrollViewer.HorizontalScrollBarVisibility="Auto"
                          ScrollViewer.VerticalScrollBarVisibility="Auto"
                          VerticalAlignment="Stretch"
                          CanUserAddRows="False"
                          Background="{Binding Source={StaticResource settings}, Path=Settings.BackgroundColor}"
                          Tag="{Binding}"
                          DataGridCell.GotFocus="DataGrid_CellGotFocus">
                          <!--DataGridCell.PreviewKeyUp="DataGridCell_KeyUp"
                          DataGridCell.PreviewKeyDown="DataGridCell_KeyDown"-->

                            <DataGrid.Resources>
                                <local:BindingProxy x:Key="proxyFilter" Data="{Binding}" />
                            </DataGrid.Resources>

                            <DataGrid.CellStyle>
                                <Style TargetType="DataGridCell">
                                    <Style.Setters>
                                        <Setter Property="Background" Value="{Binding Source={StaticResource settings}, Path=Settings.BackgroundColor}" />
                                        <Setter Property="Foreground" Value="{Binding Source={StaticResource settings}, Path=Settings.ForegroundColor}" />
                                        <Setter Property="FontSize" Value="{Binding Source={StaticResource settings}, Path=Settings.FontSize}" />
                                        <Setter Property="FontFamily" Value="{Binding Source={StaticResource settings}, Path=Settings.FontName}" />
                                    </Style.Setters>
                                </Style>
                            </DataGrid.CellStyle>

                            <DataGrid.InputBindings>
                                <KeyBinding Key="C" Modifiers="Control" Command="{Binding CopyCommand}" CommandParameter="{Binding Path=ContentList}" />
                                <!--<KeyBinding Key="Insert" Command="{Binding Path=FilterViewModel.InsertFilterItemCommand}" />-->
                            </DataGrid.InputBindings>
                                <DataGrid.ContextMenu>
                                    <ContextMenu HasDropShadow="True">
                                        <MenuItem Header="Copy" Command="{Binding CopyCommand}" CommandParameter="{Binding Path=ContentList}" InputGestureText="Ctrl+C" />
                                        <MenuItem Header="Select All" Command="{Binding SelectAllCommand}" />
                                        <MenuItem Header="Close Filter" Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.CloseCommand}" CommandParameter="{Binding}" InputGestureText="Ctrl+Alt+F4" />
                                        <MenuItem Header="Close All Filters" Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.CloseAllCommand}" CommandParameter="{Binding}" />
                                        <MenuItem Header="Copy File Path" Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.CopyFilePathCommand}" CommandParameter="{Binding}" />
                                        <MenuItem Header="New Filter" Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.NewCommand}" InputGestureText="Ctrl+Alt+N" />
                                        <MenuItem Header="Open Containing Folder" Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.OpenFolderCommand}" />
                                        <MenuItem Header="Open Filter" Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.OpenCommand}" InputGestureText="Ctrl+Alt+O" />
                                        <MenuItem Header="Reload Filter" Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.ReloadCommand}" InputGestureText="Ctrl+Alt+R" />
                                        <MenuItem Header="Save Filter" Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.SaveCommand}" InputGestureText="Ctrl+Alt+S" />
                                        <MenuItem Header="Save Filter As" Command="{Binding Source={StaticResource mainViewModel}, Path=FilterViewModel.SaveAsCommand}" CommandParameter="{Binding}" />
                                    </ContextMenu>
                                </DataGrid.ContextMenu>
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Index" Binding="{Binding Path=Index}" SortDirection="Ascending" />
                                <DataGridCheckBoxColumn Header="Enabled" Binding="{Binding Path=Enabled}" />
                                <DataGridCheckBoxColumn Header="Exclude" Binding="{Binding Path=Exclude}" />
                                <DataGridCheckBoxColumn Header="Regex" Binding="{Binding Path=Regex}" />

                                <DataGridTextColumn Width="300" Header="Filter Pattern" Binding="{Binding Path=Filterpattern, Mode=TwoWay, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True}">
                                    <DataGridTextColumn.CellStyle>
                                        <Style TargetType="DataGridCell">
                                            <Style.Setters>
                                                <Setter Property="Background" Value="{Binding Path=BackgroundColor, Mode=TwoWay, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True}" />
                                                <Setter Property="Foreground" Value="{Binding Path=ForegroundColor, Mode=TwoWay, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True}" />
                                                <Setter Property="FontSize" Value="{Binding Source={StaticResource settings}, Path=Settings.FontSize}" />
                                                <Setter Property="FontFamily" Value="{Binding Source={StaticResource settings}, Path=Settings.FontName}" />
                                            </Style.Setters>
                                        </Style>
                                    </DataGridTextColumn.CellStyle>
                                    <DataGridTextColumn.ElementStyle>
                                        <Style>
                                            <Setter Property="TextBlock.TextWrapping" Value="WrapWithOverflow" />
                                        </Style>
                                    </DataGridTextColumn.ElementStyle>
                                </DataGridTextColumn>
                                <DataGridTextColumn Header="Count" Binding="{Binding Path=Count}" IsReadOnly="True" />
                                <DataGridTextColumn Header="MaskedCount" Binding="{Binding Path=MaskedCount}" Visibility="{Binding Data.MaskedVisibility, Source={StaticResource proxyFilter}, Converter={StaticResource  BoolToVis}}" />

                                <DataGridTemplateColumn Header="Background Color">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <ComboBox Name="backgroundColorCombo"
                                                  ItemsSource="{Binding Source={StaticResource colorPropertiesOdp}}"
                                                  SelectedValuePath="Name"
                                                  SelectedValue="{Binding BackgroundColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                  VirtualizingStackPanel.IsVirtualizing="True"
                                                  VirtualizingStackPanel.VirtualizationMode="Recycling"
                                                  GotFocus="colorCombo_Selected"
                                                  KeyDown="colorCombo_KeyDown">
                                                <ComboBox.ItemTemplate>
                                                    <DataTemplate>
                                                        <StackPanel Orientation="Horizontal">
                                                            <TextBlock Width="20" Height="15" Margin="0,0,5,0" Background="{Binding Name}" />
                                                            <TextBlock Name="backgroundColorText" Text="{Binding Name}" />
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </ComboBox.ItemTemplate>
                                            </ComboBox>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>

                                <DataGridTemplateColumn Header="Foreground Color">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <ComboBox Name="foregroundColorCombo"

                                                  ItemsSource="{Binding Source={StaticResource colorPropertiesOdp}}"
                                                  SelectedValuePath="Name"
                                                  SelectedValue="{Binding ForegroundColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                  VirtualizingStackPanel.IsVirtualizing="True"
                                                  VirtualizingStackPanel.VirtualizationMode="Recycling"
                                                  GotFocus="colorCombo_Selected"
                                                  KeyDown="colorCombo_KeyDown">
                                                <ComboBox.ItemTemplate>
                                                    <DataTemplate>
                                                        <StackPanel Orientation="Horizontal">
                                                            <TextBlock Width="20" Height="15" Margin="0,0,5,0" Background="{Binding Name}" />
                                                            <TextBlock  Text="{Binding Name}" />
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </ComboBox.ItemTemplate>
                                            </ComboBox>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>

                                <DataGridTextColumn Header="Notes" Binding="{Binding Path=Notes}" Width="*">
                                    <DataGridTextColumn.ElementStyle>
                                        <Style>
                                            <Setter Property="TextBlock.TextWrapping" Value="WrapWithOverflow" />
                                        </Style>
                                    </DataGridTextColumn.ElementStyle>
                                </DataGridTextColumn>
                            </DataGrid.Columns>
                        </DataGrid>
                    </DataTemplate>
                </TabControl.ContentTemplate>
                <TabControl.ContextMenu>
                    <ContextMenu HasDropShadow="True">
                        <MenuItem Header="Close Filter" Command="{Binding FilterViewModel.CloseCommand}"  InputGestureText="Ctrl+Alt+F4" />
                        <MenuItem Header="Close All Filters" Command="{Binding FilterViewModel.CloseAllCommand}" />
                        <MenuItem Header="Copy File Path" Command="{Binding FilterViewModel.CopyFilePathCommand}" />
                        <MenuItem Header="Filter Notes" Command="{Binding FilterViewModel.FilterNotesCommand}" />
                        <MenuItem Header="New Filter" Command="{Binding FilterViewModel.NewCommand}"  InputGestureText="Ctrl+Alt+N" />
                        <MenuItem Header="Open Containing Folder" Command="{Binding FilterViewModel.OpenFolderCommand}" />
                        <MenuItem Header="Open Filter" Command="{Binding FilterViewModel.OpenCommand}"  InputGestureText="Ctrl+Alt+O" />
                        <MenuItem Header="Reload Filter" Command="{Binding FilterViewModel.ReloadCommand}" InputGestureText="Ctrl+Alt+R" />
                        <MenuItem Header="Save Filter" Command="{Binding FilterViewModel.SaveCommand}"  InputGestureText="Ctrl+Alt+S" />
                        <MenuItem Header="Save Filter As" Command="{Binding FilterViewModel.SaveAsCommand}" CommandParameter="{Binding}" />
                    </ContextMenu>
                </TabControl.ContextMenu>
            </TabControl>
            <GridSplitter Grid.Row="1" HorizontalAlignment="Stretch" Height="10" />

<!-- vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv LOG FILE DATA vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv -->

            <TabControl x:Name="tabLogs" Grid.Row="2" HorizontalAlignment="Stretch"
                        Margin="0,0,0,0" VerticalAlignment="Stretch"
                        ItemsSource="{Binding Path=LogViewModel.TabItems}"
                        SelectedIndex="{Binding Path=LogViewModel.SelectedIndex, Mode=TwoWay, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True}">

                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="GotFocus">
                        <i:InvokeCommandAction Command="{Binding LogViewModel.GotFocusCommand}"  CommandParameter="{Binding}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <TabControl.Background>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Grid 
                                Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Mode=OneWay}"
                                Height="{Binding Path=ActualHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Mode=OneWay}"
                                >
                                <Rectangle Fill="{Binding Source={StaticResource settings}, Path=Settings.BackgroundColor}"/>
                                <Image Source="../Resources/File.png" Opacity="1" HorizontalAlignment="Left" VerticalAlignment="Top" Stretch="None" />
                            </Grid>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </TabControl.Background>
                <TabControl.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Path=Header}" />
                    </DataTemplate>
                </TabControl.ItemTemplate>
                <TabControl.ContentTemplate x:Uid="logFileContent">

                    <DataTemplate>
                        <DataGrid x:Name="logFileData"
                          VirtualizingStackPanel.IsVirtualizing="True"
                          VirtualizingStackPanel.VirtualizationMode="Recycling"
                          ItemsSource="{Binding Path=ContentList}"
                          AutoGenerateColumns="False"
                          HorizontalAlignment="Stretch"
                          Margin="0,0,0,0"
                          GridLinesVisibility="None"
                          ScrollViewer.HorizontalScrollBarVisibility="Auto"
                          ScrollViewer.VerticalScrollBarVisibility="Auto"
                          VerticalAlignment="Stretch"
                          CanUserAddRows="False"
                          CanUserReorderColumns="True"
                          CanUserDeleteRows="False"
                          IsReadOnly="True"

                          SelectionMode="Extended"
                          SelectionUnit="FullRow"
                          Background="{Binding Source={StaticResource settings}, Path=Settings.BackgroundColor}"
                          Tag="{Binding}">
                        <DataGrid.Resources>
                            <local:BindingProxy x:Key="proxyLog" Data="{Binding}" />
                        </DataGrid.Resources>

                        <DataGrid.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Style.Setters>
                                    <Setter Property="Background" Value="{Binding Path=Background}" />
                                    <Setter Property="Foreground" Value="{Binding Path=Foreground}" />
                                    <Setter Property="FontSize" Value="{Binding Source={StaticResource settings}, Path=Settings.FontSize}" />
                                    <Setter Property="FontFamily" Value="{Binding Source={StaticResource settings}, Path=Settings.FontName}" />
                                    <Setter Property="BorderThickness" Value="1" />
                                    <Setter Property="BorderBrush" Value="{Binding Path=Background}" />
                                </Style.Setters>
                                    <Style.Triggers>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="BorderBrush" Value="{Binding Path=Foreground}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGrid.CellStyle>

                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Index" Binding="{Binding Path=Index}" SortDirection="Ascending" />
                                <DataGridTextColumn Header="Content" Binding="{Binding Path=Content}" Width="5*">
                                    <DataGridTextColumn.ElementStyle>
                                        <Style>
                                            <Setter Property="TextBlock.TextWrapping" Value="WrapWithOverflow" />
                                        </Style>
                                    </DataGridTextColumn.ElementStyle>
                                </DataGridTextColumn>

                                <DataGridTextColumn Header="Group1" Width="*" Binding="{Binding Path=Group1}" Visibility="{Binding Data.Group1Visibility, Source={StaticResource proxyLog}, Converter={StaticResource  BoolToVis}}">
                                        <DataGridTextColumn.ElementStyle>
                                            <Style>
                                                <Setter Property="TextBlock.TextWrapping" Value="WrapWithOverflow" />
                                            </Style>
                                        </DataGridTextColumn.ElementStyle>
                                    </DataGridTextColumn>
                                    <DataGridTextColumn Header="Group2" Width="*" Binding="{Binding Path=Group2}" Visibility="{Binding Data.Group2Visibility, Source={StaticResource proxyLog}, Converter={StaticResource  BoolToVis}}">
                                        <DataGridTextColumn.ElementStyle>
                                            <Style>
                                                <Setter Property="TextBlock.TextWrapping" Value="WrapWithOverflow" />
                                            </Style>
                                        </DataGridTextColumn.ElementStyle>
                                    </DataGridTextColumn>
                                <DataGridTextColumn Header="Group3" Width="*" Binding="{Binding Path=Group3}" Visibility="{Binding Data.Group3Visibility, Source={StaticResource proxyLog}, Converter={StaticResource  BoolToVis}}">
                                        <DataGridTextColumn.ElementStyle>
                                            <Style>
                                                <Setter Property="TextBlock.TextWrapping" Value="WrapWithOverflow" />
                                            </Style>
                                        </DataGridTextColumn.ElementStyle>
                                    </DataGridTextColumn>
                                    <DataGridTextColumn Header="Group4" Width="*" Binding="{Binding Path=Group4}" Visibility="{Binding Data.Group4Visibility, Source={StaticResource proxyLog}, Converter={StaticResource  BoolToVis}}">
                                        <DataGridTextColumn.ElementStyle>
                                            <Style>
                                                <Setter Property="TextBlock.TextWrapping" Value="WrapWithOverflow" />
                                            </Style>
                                        </DataGridTextColumn.ElementStyle>
                                    </DataGridTextColumn>
                            </DataGrid.Columns>

                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="SourceUpdated">
                                    <i:InvokeCommandAction Command="{Binding SourceUpdatedCommand}"  CommandParameter="{Binding ElementName=logFileData}" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="SelectionChanged">
                                    <i:InvokeCommandAction Command="{Binding SelectionChangedCommand}"  CommandParameter="{Binding ElementName=logFileData}" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="LayoutUpdated">
                                    <i:InvokeCommandAction Command="{Binding SetViewerCommand}"  CommandParameter="{Binding ElementName=logFileData}" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="PreviewKeyDown">
                                    <i:InvokeCommandAction Command="{Binding KeyDownCommand}"  CommandParameter="{Binding}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>

                            <DataGrid.InputBindings>
                                <KeyBinding Key="C" Modifiers="Control" Command="{Binding CopyCommand}" />
                            </DataGrid.InputBindings>

                            <DataGrid.ContextMenu>
                                <ContextMenu HasDropShadow="True">
                                    <MenuItem Header="Copy" Command="{Binding CopyCommand}" CommandParameter="{Binding Path=ContentList}" InputGestureText="Ctrl+C" />
                                    <MenuItem Header="Close File" Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.CloseCommand}" InputGestureText="Ctrl+F4" />
                                    <MenuItem Header="Close All Files" Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.CloseAllCommand}" />
                                    <MenuItem Header="Copy File Path" Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.CopyFilePathCommand}" />
                                    <MenuItem Header="Export File" Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.ExportCommand}" InputGestureText="Ctrl+E" />
                                    <MenuItem Header="Goto Line" Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.GotoLineCommand}" CommandParameter="{Binding ElementName=listboxStatus}" InputGestureText="Ctrl+G" />
                                    <MenuItem Header="Open Containing Folder" Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.OpenFolderCommand}" />
                                    <MenuItem Header="Open File" Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.OpenCommand}" InputGestureText="Ctrl+O" />
                                    <MenuItem Header="Open View in new Tab" Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.NewCommand}" InputGestureText="Ctrl+N" />
                                    <MenuItem Header="Reload File" Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.ReloadCommand}" InputGestureText="Ctrl+R" />
                                    <MenuItem Header="Save Current View" Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.SaveAsCommand}" InputGestureText="Ctrl+S" />
                                    <MenuItem Header="Show / Hide All Items" Command="{Binding Source={StaticResource mainViewModel}, Path=LogViewModel.HideCommand}" CommandParameter="{Binding ElementName=listboxStatus}" InputGestureText="Ctrl+H" />

                                    <MenuItem Header="Select All" Command="{Binding SelectAllCommand}" InputGestureText="Ctrl+A" />
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                        </DataGrid>
                    </DataTemplate>
                </TabControl.ContentTemplate>

                <TabControl.ContextMenu>
                    <ContextMenu HasDropShadow="True">
                        <MenuItem Header="Close File" Command="{Binding LogViewModel.CloseCommand}" CommandParameter="{Binding}" InputGestureText="Ctrl+F4" />
                        <MenuItem Header="Close All Files" Command="{Binding LogViewModel.CloseAllCommand}" CommandParameter="{Binding}" InputGestureText="Ctrl+Shift+F4" />
                        <MenuItem Header="Copy File Path" Command="{Binding LogViewModel.CopyFilePathCommand}" CommandParameter="{Binding}" />
                        <MenuItem Header="Open Containing Folder" Command="{Binding LogViewModel.OpenFolderCommand}" CommandParameter="{Binding}" />
                        <MenuItem Header="Open File" Command="{Binding LogViewModel.OpenCommand}" CommandParameter="{Binding}" InputGestureText="Ctrl+O" />
                        <MenuItem Header="Reload File" Command="{Binding LogViewModel.ReloadCommand}" CommandParameter="{Binding}" InputGestureText="Ctrl+R" />
                    </ContextMenu>
                </TabControl.ContextMenu>
            </TabControl>

            <Grid x:Name="GridStatus" Grid.Row="3" Height="25" VerticalAlignment="Bottom" HorizontalAlignment="Stretch">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="100" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="5" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <TextBox Name="textboxLineTotals"
                    Height="25"
                     Grid.Column="0"
                     HorizontalAlignment="Stretch"
                     VerticalAlignment="Bottom"
                     Margin="1,5,1,0"
                     Text="{Binding Path=LogViewModel.LineTotals}" />

                    <Label Name="labelStatus" HorizontalAlignment="Left" VerticalAlignment="Bottom" Grid.Column="1" Content="Status:" Width="50"  Height="25" Margin="1,1,1,3" />

                <ListBox x:Name="listboxStatus" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Bottom"
                     Margin="50,0,0,0"
                     SelectionMode="Extended"
                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                     SelectedIndex="{Binding Path=StatusIndex}"
                     Height="25"
                     ItemsSource="{Binding Path=Status}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <i:InvokeCommandAction Command="{Binding StatusChangedCommand}"  CommandParameter="{Binding ElementName=listboxStatus}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <ListBox.InputBindings>
                        <KeyBinding Key="C" Modifiers="Control" Command="{Binding CopyCommand}"  CommandParameter="{Binding Path=Status}" />
                    </ListBox.InputBindings>

                    <ListBox.ContextMenu>
                        <ContextMenu HasDropShadow="True">
                            <MenuItem Header="Copy" Command="{Binding CopyCommand}" CommandParameter="{Binding Path=Status}" InputGestureText="Ctrl+C" />

                            <MenuItem Header="Select All" Command="{Binding SelectAllCommand}" />
                        </ContextMenu>
                    </ListBox.ContextMenu>
                </ListBox>
                <GridSplitter Grid.Column="2" Height="25" Width="5" HorizontalAlignment="Center" />
                <Label Name="labelQuickFind" HorizontalAlignment="Left" Height="25" VerticalAlignment="Bottom" Grid.Column="3" Content="AND/Quick Filter:" Width="105" Margin="1,1,1,3" />
                <TextBox Name="textboxQuickFind"
                    Height="25"
                     Grid.Column="3"
                     HorizontalAlignment="Stretch"
                     VerticalAlignment="Bottom"
                     Margin="105,0,0,0">
                    <TextBox.InputBindings>
                        <KeyBinding Key="Enter" Command="{Binding LogViewModel.QuickFindChangedCommand}"  CommandParameter="{Binding ElementName=textboxQuickFind, Path=Text}" />
                    </TextBox.InputBindings>
                </TextBox>
            </Grid>
        </Grid>
    </DockPanel>
</Window>